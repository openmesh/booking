// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/openmesh/booking/ent/auth"
	"github.com/openmesh/booking/ent/booking"
	"github.com/openmesh/booking/ent/bookingmetadatum"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/organizationownership"
	"github.com/openmesh/booking/ent/predicate"
	"github.com/openmesh/booking/ent/resource"
	"github.com/openmesh/booking/ent/slot"
	"github.com/openmesh/booking/ent/unavailability"
	"github.com/openmesh/booking/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 9)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   auth.Table,
			Columns: auth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: auth.FieldID,
			},
		},
		Type: "Auth",
		Fields: map[string]*sqlgraph.FieldSpec{
			auth.FieldCreatedAt:    {Type: field.TypeTime, Column: auth.FieldCreatedAt},
			auth.FieldUpdatedAt:    {Type: field.TypeTime, Column: auth.FieldUpdatedAt},
			auth.FieldSource:       {Type: field.TypeString, Column: auth.FieldSource},
			auth.FieldSourceId:     {Type: field.TypeString, Column: auth.FieldSourceId},
			auth.FieldAccessToken:  {Type: field.TypeString, Column: auth.FieldAccessToken},
			auth.FieldRefreshToken: {Type: field.TypeString, Column: auth.FieldRefreshToken},
			auth.FieldExpiry:       {Type: field.TypeTime, Column: auth.FieldExpiry},
			auth.FieldUserId:       {Type: field.TypeInt, Column: auth.FieldUserId},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   booking.Table,
			Columns: booking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: booking.FieldID,
			},
		},
		Type: "Booking",
		Fields: map[string]*sqlgraph.FieldSpec{
			booking.FieldCreatedAt:      {Type: field.TypeTime, Column: booking.FieldCreatedAt},
			booking.FieldUpdatedAt:      {Type: field.TypeTime, Column: booking.FieldUpdatedAt},
			booking.FieldStatus:         {Type: field.TypeString, Column: booking.FieldStatus},
			booking.FieldStartTime:      {Type: field.TypeTime, Column: booking.FieldStartTime},
			booking.FieldEndTime:        {Type: field.TypeTime, Column: booking.FieldEndTime},
			booking.FieldResourceId:     {Type: field.TypeInt, Column: booking.FieldResourceId},
			booking.FieldOrganizationId: {Type: field.TypeInt, Column: booking.FieldOrganizationId},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   bookingmetadatum.Table,
			Columns: bookingmetadatum.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookingmetadatum.FieldID,
			},
		},
		Type: "BookingMetadatum",
		Fields: map[string]*sqlgraph.FieldSpec{
			bookingmetadatum.FieldKey:       {Type: field.TypeString, Column: bookingmetadatum.FieldKey},
			bookingmetadatum.FieldValue:     {Type: field.TypeString, Column: bookingmetadatum.FieldValue},
			bookingmetadatum.FieldBookingId: {Type: field.TypeInt, Column: bookingmetadatum.FieldBookingId},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt:  {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:  {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldName:       {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldPublicKey:  {Type: field.TypeString, Column: organization.FieldPublicKey},
			organization.FieldPrivateKey: {Type: field.TypeString, Column: organization.FieldPrivateKey},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationownership.Table,
			Columns: organizationownership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organizationownership.FieldID,
			},
		},
		Type: "OrganizationOwnership",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationownership.FieldUserId:         {Type: field.TypeInt, Column: organizationownership.FieldUserId},
			organizationownership.FieldOrganizationId: {Type: field.TypeInt, Column: organizationownership.FieldOrganizationId},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   resource.Table,
			Columns: resource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resource.FieldID,
			},
		},
		Type: "Resource",
		Fields: map[string]*sqlgraph.FieldSpec{
			resource.FieldCreatedAt:         {Type: field.TypeTime, Column: resource.FieldCreatedAt},
			resource.FieldUpdatedAt:         {Type: field.TypeTime, Column: resource.FieldUpdatedAt},
			resource.FieldName:              {Type: field.TypeString, Column: resource.FieldName},
			resource.FieldDescription:       {Type: field.TypeString, Column: resource.FieldDescription},
			resource.FieldTimezone:          {Type: field.TypeString, Column: resource.FieldTimezone},
			resource.FieldPassword:          {Type: field.TypeString, Column: resource.FieldPassword},
			resource.FieldPrice:             {Type: field.TypeInt, Column: resource.FieldPrice},
			resource.FieldBookingPrice:      {Type: field.TypeInt, Column: resource.FieldBookingPrice},
			resource.FieldOrganizationId:    {Type: field.TypeInt, Column: resource.FieldOrganizationId},
			resource.FieldQuantityAvailable: {Type: field.TypeInt, Column: resource.FieldQuantityAvailable},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   slot.Table,
			Columns: slot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: slot.FieldID,
			},
		},
		Type: "Slot",
		Fields: map[string]*sqlgraph.FieldSpec{
			slot.FieldDay:        {Type: field.TypeString, Column: slot.FieldDay},
			slot.FieldStartTime:  {Type: field.TypeString, Column: slot.FieldStartTime},
			slot.FieldEndTime:    {Type: field.TypeString, Column: slot.FieldEndTime},
			slot.FieldQuantity:   {Type: field.TypeInt, Column: slot.FieldQuantity},
			slot.FieldResourceId: {Type: field.TypeInt, Column: slot.FieldResourceId},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   unavailability.Table,
			Columns: unavailability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unavailability.FieldID,
			},
		},
		Type: "Unavailability",
		Fields: map[string]*sqlgraph.FieldSpec{
			unavailability.FieldCreatedAt:      {Type: field.TypeTime, Column: unavailability.FieldCreatedAt},
			unavailability.FieldUpdatedAt:      {Type: field.TypeTime, Column: unavailability.FieldUpdatedAt},
			unavailability.FieldStartTime:      {Type: field.TypeTime, Column: unavailability.FieldStartTime},
			unavailability.FieldEndTime:        {Type: field.TypeTime, Column: unavailability.FieldEndTime},
			unavailability.FieldResourceId:     {Type: field.TypeInt, Column: unavailability.FieldResourceId},
			unavailability.FieldOrganizationId: {Type: field.TypeInt, Column: unavailability.FieldOrganizationId},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:      {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:      {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldName:           {Type: field.TypeString, Column: user.FieldName},
			user.FieldEmail:          {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldOrganizationId: {Type: field.TypeInt, Column: user.FieldOrganizationId},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auth.UserTable,
			Columns: []string{auth.UserColumn},
			Bidi:    false,
		},
		"Auth",
		"User",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   booking.MetadataTable,
			Columns: []string{booking.MetadataColumn},
			Bidi:    false,
		},
		"Booking",
		"BookingMetadatum",
	)
	graph.MustAddE(
		"resource",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.ResourceTable,
			Columns: []string{booking.ResourceColumn},
			Bidi:    false,
		},
		"Booking",
		"Resource",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.OrganizationTable,
			Columns: []string{booking.OrganizationColumn},
			Bidi:    false,
		},
		"Booking",
		"Organization",
	)
	graph.MustAddE(
		"booking",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookingmetadatum.BookingTable,
			Columns: []string{bookingmetadatum.BookingColumn},
			Bidi:    false,
		},
		"BookingMetadatum",
		"Booking",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"resources",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ResourcesTable,
			Columns: []string{organization.ResourcesColumn},
			Bidi:    false,
		},
		"Organization",
		"Resource",
	)
	graph.MustAddE(
		"bookings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.BookingsTable,
			Columns: []string{organization.BookingsColumn},
			Bidi:    false,
		},
		"Organization",
		"Booking",
	)
	graph.MustAddE(
		"unavailabilities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UnavailabilitiesTable,
			Columns: []string{organization.UnavailabilitiesColumn},
			Bidi:    false,
		},
		"Organization",
		"Unavailability",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.UserTable,
			Columns: []string{organizationownership.UserColumn},
			Bidi:    false,
		},
		"OrganizationOwnership",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.OrganizationTable,
			Columns: []string{organizationownership.OrganizationColumn},
			Bidi:    false,
		},
		"OrganizationOwnership",
		"Organization",
	)
	graph.MustAddE(
		"slots",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.SlotsTable,
			Columns: []string{resource.SlotsColumn},
			Bidi:    false,
		},
		"Resource",
		"Slot",
	)
	graph.MustAddE(
		"bookings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.BookingsTable,
			Columns: []string{resource.BookingsColumn},
			Bidi:    false,
		},
		"Resource",
		"Booking",
	)
	graph.MustAddE(
		"unavailabilities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.UnavailabilitiesTable,
			Columns: []string{resource.UnavailabilitiesColumn},
			Bidi:    false,
		},
		"Resource",
		"Unavailability",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.OrganizationTable,
			Columns: []string{resource.OrganizationColumn},
			Bidi:    false,
		},
		"Resource",
		"Organization",
	)
	graph.MustAddE(
		"resource",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slot.ResourceTable,
			Columns: []string{slot.ResourceColumn},
			Bidi:    false,
		},
		"Slot",
		"Resource",
	)
	graph.MustAddE(
		"resource",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unavailability.ResourceTable,
			Columns: []string{unavailability.ResourceColumn},
			Bidi:    false,
		},
		"Unavailability",
		"Resource",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unavailability.OrganizationTable,
			Columns: []string{unavailability.OrganizationColumn},
			Bidi:    false,
		},
		"Unavailability",
		"Organization",
	)
	graph.MustAddE(
		"auths",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthsTable,
			Columns: []string{user.AuthsColumn},
			Bidi:    false,
		},
		"User",
		"Auth",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuthQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthQuery builder.
func (aq *AuthQuery) Filter() *AuthFilter {
	return &AuthFilter{aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthMutation builder.
func (m *AuthMutation) Filter() *AuthFilter {
	return &AuthFilter{m}
}

// AuthFilter provides a generic filtering capability at runtime for AuthQuery.
type AuthFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AuthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AuthFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(auth.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *AuthFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(auth.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *AuthFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(auth.FieldUpdatedAt))
}

// WhereSource applies the entql string predicate on the source field.
func (f *AuthFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(auth.FieldSource))
}

// WhereSourceId applies the entql string predicate on the sourceId field.
func (f *AuthFilter) WhereSourceId(p entql.StringP) {
	f.Where(p.Field(auth.FieldSourceId))
}

// WhereAccessToken applies the entql string predicate on the accessToken field.
func (f *AuthFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(auth.FieldAccessToken))
}

// WhereRefreshToken applies the entql string predicate on the refreshToken field.
func (f *AuthFilter) WhereRefreshToken(p entql.StringP) {
	f.Where(p.Field(auth.FieldRefreshToken))
}

// WhereExpiry applies the entql time.Time predicate on the expiry field.
func (f *AuthFilter) WhereExpiry(p entql.TimeP) {
	f.Where(p.Field(auth.FieldExpiry))
}

// WhereUserId applies the entql int predicate on the userId field.
func (f *AuthFilter) WhereUserId(p entql.IntP) {
	f.Where(p.Field(auth.FieldUserId))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *AuthFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *AuthFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BookingQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BookingQuery builder.
func (bq *BookingQuery) Filter() *BookingFilter {
	return &BookingFilter{bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BookingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BookingMutation builder.
func (m *BookingMutation) Filter() *BookingFilter {
	return &BookingFilter{m}
}

// BookingFilter provides a generic filtering capability at runtime for BookingQuery.
type BookingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BookingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BookingFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(booking.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *BookingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(booking.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *BookingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(booking.FieldUpdatedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *BookingFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(booking.FieldStatus))
}

// WhereStartTime applies the entql time.Time predicate on the startTime field.
func (f *BookingFilter) WhereStartTime(p entql.TimeP) {
	f.Where(p.Field(booking.FieldStartTime))
}

// WhereEndTime applies the entql time.Time predicate on the endTime field.
func (f *BookingFilter) WhereEndTime(p entql.TimeP) {
	f.Where(p.Field(booking.FieldEndTime))
}

// WhereResourceId applies the entql int predicate on the resourceId field.
func (f *BookingFilter) WhereResourceId(p entql.IntP) {
	f.Where(p.Field(booking.FieldResourceId))
}

// WhereOrganizationId applies the entql int predicate on the organizationId field.
func (f *BookingFilter) WhereOrganizationId(p entql.IntP) {
	f.Where(p.Field(booking.FieldOrganizationId))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *BookingFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *BookingFilter) WhereHasMetadataWith(preds ...predicate.BookingMetadatum) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasResource applies a predicate to check if query has an edge resource.
func (f *BookingFilter) WhereHasResource() {
	f.Where(entql.HasEdge("resource"))
}

// WhereHasResourceWith applies a predicate to check if query has an edge resource with a given conditions (other predicates).
func (f *BookingFilter) WhereHasResourceWith(preds ...predicate.Resource) {
	f.Where(entql.HasEdgeWith("resource", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *BookingFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *BookingFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bmq *BookingMetadatumQuery) addPredicate(pred func(s *sql.Selector)) {
	bmq.predicates = append(bmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BookingMetadatumQuery builder.
func (bmq *BookingMetadatumQuery) Filter() *BookingMetadatumFilter {
	return &BookingMetadatumFilter{bmq}
}

// addPredicate implements the predicateAdder interface.
func (m *BookingMetadatumMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BookingMetadatumMutation builder.
func (m *BookingMetadatumMutation) Filter() *BookingMetadatumFilter {
	return &BookingMetadatumFilter{m}
}

// BookingMetadatumFilter provides a generic filtering capability at runtime for BookingMetadatumQuery.
type BookingMetadatumFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BookingMetadatumFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BookingMetadatumFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(bookingmetadatum.FieldID))
}

// WhereKey applies the entql string predicate on the key field.
func (f *BookingMetadatumFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(bookingmetadatum.FieldKey))
}

// WhereValue applies the entql string predicate on the value field.
func (f *BookingMetadatumFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(bookingmetadatum.FieldValue))
}

// WhereBookingId applies the entql int predicate on the bookingId field.
func (f *BookingMetadatumFilter) WhereBookingId(p entql.IntP) {
	f.Where(p.Field(bookingmetadatum.FieldBookingId))
}

// WhereHasBooking applies a predicate to check if query has an edge booking.
func (f *BookingMetadatumFilter) WhereHasBooking() {
	f.Where(entql.HasEdge("booking"))
}

// WhereHasBookingWith applies a predicate to check if query has an edge booking with a given conditions (other predicates).
func (f *BookingMetadatumFilter) WhereHasBookingWith(preds ...predicate.Booking) {
	f.Where(entql.HasEdgeWith("booking", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (oq *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WherePublicKey applies the entql string predicate on the publicKey field.
func (f *OrganizationFilter) WherePublicKey(p entql.StringP) {
	f.Where(p.Field(organization.FieldPublicKey))
}

// WherePrivateKey applies the entql string predicate on the privateKey field.
func (f *OrganizationFilter) WherePrivateKey(p entql.StringP) {
	f.Where(p.Field(organization.FieldPrivateKey))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *OrganizationFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasResources applies a predicate to check if query has an edge resources.
func (f *OrganizationFilter) WhereHasResources() {
	f.Where(entql.HasEdge("resources"))
}

// WhereHasResourcesWith applies a predicate to check if query has an edge resources with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasResourcesWith(preds ...predicate.Resource) {
	f.Where(entql.HasEdgeWith("resources", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBookings applies a predicate to check if query has an edge bookings.
func (f *OrganizationFilter) WhereHasBookings() {
	f.Where(entql.HasEdge("bookings"))
}

// WhereHasBookingsWith applies a predicate to check if query has an edge bookings with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasBookingsWith(preds ...predicate.Booking) {
	f.Where(entql.HasEdgeWith("bookings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUnavailabilities applies a predicate to check if query has an edge unavailabilities.
func (f *OrganizationFilter) WhereHasUnavailabilities() {
	f.Where(entql.HasEdge("unavailabilities"))
}

// WhereHasUnavailabilitiesWith applies a predicate to check if query has an edge unavailabilities with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUnavailabilitiesWith(preds ...predicate.Unavailability) {
	f.Where(entql.HasEdgeWith("unavailabilities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ooq *OrganizationOwnershipQuery) addPredicate(pred func(s *sql.Selector)) {
	ooq.predicates = append(ooq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationOwnershipQuery builder.
func (ooq *OrganizationOwnershipQuery) Filter() *OrganizationOwnershipFilter {
	return &OrganizationOwnershipFilter{ooq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationOwnershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationOwnershipMutation builder.
func (m *OrganizationOwnershipMutation) Filter() *OrganizationOwnershipFilter {
	return &OrganizationOwnershipFilter{m}
}

// OrganizationOwnershipFilter provides a generic filtering capability at runtime for OrganizationOwnershipQuery.
type OrganizationOwnershipFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationOwnershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrganizationOwnershipFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(organizationownership.FieldID))
}

// WhereUserId applies the entql int predicate on the userId field.
func (f *OrganizationOwnershipFilter) WhereUserId(p entql.IntP) {
	f.Where(p.Field(organizationownership.FieldUserId))
}

// WhereOrganizationId applies the entql int predicate on the organizationId field.
func (f *OrganizationOwnershipFilter) WhereOrganizationId(p entql.IntP) {
	f.Where(p.Field(organizationownership.FieldOrganizationId))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OrganizationOwnershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OrganizationOwnershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrganizationOwnershipFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrganizationOwnershipFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *ResourceQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ResourceQuery builder.
func (rq *ResourceQuery) Filter() *ResourceFilter {
	return &ResourceFilter{rq}
}

// addPredicate implements the predicateAdder interface.
func (m *ResourceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ResourceMutation builder.
func (m *ResourceMutation) Filter() *ResourceFilter {
	return &ResourceFilter{m}
}

// ResourceFilter provides a generic filtering capability at runtime for ResourceQuery.
type ResourceFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ResourceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ResourceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(resource.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *ResourceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(resource.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *ResourceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(resource.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *ResourceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(resource.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ResourceFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(resource.FieldDescription))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *ResourceFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(resource.FieldTimezone))
}

// WherePassword applies the entql string predicate on the password field.
func (f *ResourceFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(resource.FieldPassword))
}

// WherePrice applies the entql int predicate on the price field.
func (f *ResourceFilter) WherePrice(p entql.IntP) {
	f.Where(p.Field(resource.FieldPrice))
}

// WhereBookingPrice applies the entql int predicate on the bookingPrice field.
func (f *ResourceFilter) WhereBookingPrice(p entql.IntP) {
	f.Where(p.Field(resource.FieldBookingPrice))
}

// WhereOrganizationId applies the entql int predicate on the organizationId field.
func (f *ResourceFilter) WhereOrganizationId(p entql.IntP) {
	f.Where(p.Field(resource.FieldOrganizationId))
}

// WhereQuantityAvailable applies the entql int predicate on the quantityAvailable field.
func (f *ResourceFilter) WhereQuantityAvailable(p entql.IntP) {
	f.Where(p.Field(resource.FieldQuantityAvailable))
}

// WhereHasSlots applies a predicate to check if query has an edge slots.
func (f *ResourceFilter) WhereHasSlots() {
	f.Where(entql.HasEdge("slots"))
}

// WhereHasSlotsWith applies a predicate to check if query has an edge slots with a given conditions (other predicates).
func (f *ResourceFilter) WhereHasSlotsWith(preds ...predicate.Slot) {
	f.Where(entql.HasEdgeWith("slots", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBookings applies a predicate to check if query has an edge bookings.
func (f *ResourceFilter) WhereHasBookings() {
	f.Where(entql.HasEdge("bookings"))
}

// WhereHasBookingsWith applies a predicate to check if query has an edge bookings with a given conditions (other predicates).
func (f *ResourceFilter) WhereHasBookingsWith(preds ...predicate.Booking) {
	f.Where(entql.HasEdgeWith("bookings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUnavailabilities applies a predicate to check if query has an edge unavailabilities.
func (f *ResourceFilter) WhereHasUnavailabilities() {
	f.Where(entql.HasEdge("unavailabilities"))
}

// WhereHasUnavailabilitiesWith applies a predicate to check if query has an edge unavailabilities with a given conditions (other predicates).
func (f *ResourceFilter) WhereHasUnavailabilitiesWith(preds ...predicate.Unavailability) {
	f.Where(entql.HasEdgeWith("unavailabilities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ResourceFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ResourceFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SlotQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SlotQuery builder.
func (sq *SlotQuery) Filter() *SlotFilter {
	return &SlotFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SlotMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SlotMutation builder.
func (m *SlotMutation) Filter() *SlotFilter {
	return &SlotFilter{m}
}

// SlotFilter provides a generic filtering capability at runtime for SlotQuery.
type SlotFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SlotFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SlotFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(slot.FieldID))
}

// WhereDay applies the entql string predicate on the day field.
func (f *SlotFilter) WhereDay(p entql.StringP) {
	f.Where(p.Field(slot.FieldDay))
}

// WhereStartTime applies the entql string predicate on the startTime field.
func (f *SlotFilter) WhereStartTime(p entql.StringP) {
	f.Where(p.Field(slot.FieldStartTime))
}

// WhereEndTime applies the entql string predicate on the endTime field.
func (f *SlotFilter) WhereEndTime(p entql.StringP) {
	f.Where(p.Field(slot.FieldEndTime))
}

// WhereQuantity applies the entql int predicate on the quantity field.
func (f *SlotFilter) WhereQuantity(p entql.IntP) {
	f.Where(p.Field(slot.FieldQuantity))
}

// WhereResourceId applies the entql int predicate on the resourceId field.
func (f *SlotFilter) WhereResourceId(p entql.IntP) {
	f.Where(p.Field(slot.FieldResourceId))
}

// WhereHasResource applies a predicate to check if query has an edge resource.
func (f *SlotFilter) WhereHasResource() {
	f.Where(entql.HasEdge("resource"))
}

// WhereHasResourceWith applies a predicate to check if query has an edge resource with a given conditions (other predicates).
func (f *SlotFilter) WhereHasResourceWith(preds ...predicate.Resource) {
	f.Where(entql.HasEdgeWith("resource", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UnavailabilityQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UnavailabilityQuery builder.
func (uq *UnavailabilityQuery) Filter() *UnavailabilityFilter {
	return &UnavailabilityFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UnavailabilityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UnavailabilityMutation builder.
func (m *UnavailabilityMutation) Filter() *UnavailabilityFilter {
	return &UnavailabilityFilter{m}
}

// UnavailabilityFilter provides a generic filtering capability at runtime for UnavailabilityQuery.
type UnavailabilityFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UnavailabilityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UnavailabilityFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(unavailability.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *UnavailabilityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(unavailability.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *UnavailabilityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(unavailability.FieldUpdatedAt))
}

// WhereStartTime applies the entql time.Time predicate on the startTime field.
func (f *UnavailabilityFilter) WhereStartTime(p entql.TimeP) {
	f.Where(p.Field(unavailability.FieldStartTime))
}

// WhereEndTime applies the entql time.Time predicate on the endTime field.
func (f *UnavailabilityFilter) WhereEndTime(p entql.TimeP) {
	f.Where(p.Field(unavailability.FieldEndTime))
}

// WhereResourceId applies the entql int predicate on the resourceId field.
func (f *UnavailabilityFilter) WhereResourceId(p entql.IntP) {
	f.Where(p.Field(unavailability.FieldResourceId))
}

// WhereOrganizationId applies the entql int predicate on the organizationId field.
func (f *UnavailabilityFilter) WhereOrganizationId(p entql.IntP) {
	f.Where(p.Field(unavailability.FieldOrganizationId))
}

// WhereHasResource applies a predicate to check if query has an edge resource.
func (f *UnavailabilityFilter) WhereHasResource() {
	f.Where(entql.HasEdge("resource"))
}

// WhereHasResourceWith applies a predicate to check if query has an edge resource with a given conditions (other predicates).
func (f *UnavailabilityFilter) WhereHasResourceWith(preds ...predicate.Resource) {
	f.Where(entql.HasEdgeWith("resource", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *UnavailabilityFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *UnavailabilityFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updatedAt field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereOrganizationId applies the entql int predicate on the organizationId field.
func (f *UserFilter) WhereOrganizationId(p entql.IntP) {
	f.Where(p.Field(user.FieldOrganizationId))
}

// WhereHasAuths applies a predicate to check if query has an edge auths.
func (f *UserFilter) WhereHasAuths() {
	f.Where(entql.HasEdge("auths"))
}

// WhereHasAuthsWith applies a predicate to check if query has an edge auths with a given conditions (other predicates).
func (f *UserFilter) WhereHasAuthsWith(preds ...predicate.Auth) {
	f.Where(entql.HasEdgeWith("auths", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *UserFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
