// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/openmesh/booking/ent/booking"
	"github.com/openmesh/booking/ent/bookingmetadatum"
)

// BookingMetadatum is the model entity for the BookingMetadatum schema.
type BookingMetadatum struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// BookingId holds the value of the "bookingId" field.
	BookingId int `json:"bookingId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookingMetadatumQuery when eager-loading is set.
	Edges BookingMetadatumEdges `json:"edges"`
}

// BookingMetadatumEdges holds the relations/edges for other nodes in the graph.
type BookingMetadatumEdges struct {
	// Booking holds the value of the booking edge.
	Booking *Booking `json:"booking,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookingOrErr returns the Booking value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookingMetadatumEdges) BookingOrErr() (*Booking, error) {
	if e.loadedTypes[0] {
		if e.Booking == nil {
			// The edge booking was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: booking.Label}
		}
		return e.Booking, nil
	}
	return nil, &NotLoadedError{edge: "booking"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookingMetadatum) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookingmetadatum.FieldID, bookingmetadatum.FieldBookingId:
			values[i] = new(sql.NullInt64)
		case bookingmetadatum.FieldKey, bookingmetadatum.FieldValue:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BookingMetadatum", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookingMetadatum fields.
func (bm *BookingMetadatum) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookingmetadatum.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bm.ID = int(value.Int64)
		case bookingmetadatum.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				bm.Key = value.String
			}
		case bookingmetadatum.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				bm.Value = value.String
			}
		case bookingmetadatum.FieldBookingId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bookingId", values[i])
			} else if value.Valid {
				bm.BookingId = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryBooking queries the "booking" edge of the BookingMetadatum entity.
func (bm *BookingMetadatum) QueryBooking() *BookingQuery {
	return (&BookingMetadatumClient{config: bm.config}).QueryBooking(bm)
}

// Update returns a builder for updating this BookingMetadatum.
// Note that you need to call BookingMetadatum.Unwrap() before calling this method if this BookingMetadatum
// was returned from a transaction, and the transaction was committed or rolled back.
func (bm *BookingMetadatum) Update() *BookingMetadatumUpdateOne {
	return (&BookingMetadatumClient{config: bm.config}).UpdateOne(bm)
}

// Unwrap unwraps the BookingMetadatum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bm *BookingMetadatum) Unwrap() *BookingMetadatum {
	tx, ok := bm.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookingMetadatum is not a transactional entity")
	}
	bm.config.driver = tx.drv
	return bm
}

// String implements the fmt.Stringer.
func (bm *BookingMetadatum) String() string {
	var builder strings.Builder
	builder.WriteString("BookingMetadatum(")
	builder.WriteString(fmt.Sprintf("id=%v", bm.ID))
	builder.WriteString(", key=")
	builder.WriteString(bm.Key)
	builder.WriteString(", value=")
	builder.WriteString(bm.Value)
	builder.WriteString(", bookingId=")
	builder.WriteString(fmt.Sprintf("%v", bm.BookingId))
	builder.WriteByte(')')
	return builder.String()
}

// BookingMetadata is a parsable slice of BookingMetadatum.
type BookingMetadata []*BookingMetadatum

func (bm BookingMetadata) config(cfg config) {
	for _i := range bm {
		bm[_i].config = cfg
	}
}
