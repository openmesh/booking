// Code generated by entc, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/openmesh/booking/ent/auth"
	"github.com/openmesh/booking/ent/booking"
	"github.com/openmesh/booking/ent/bookingmetadatum"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/resource"
	"github.com/openmesh/booking/ent/schema"
	"github.com/openmesh/booking/ent/slot"
	"github.com/openmesh/booking/ent/token"
	"github.com/openmesh/booking/ent/unavailability"
	"github.com/openmesh/booking/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authMixin := schema.Auth{}.Mixin()
	authMixinFields0 := authMixin[0].Fields()
	_ = authMixinFields0
	authFields := schema.Auth{}.Fields()
	_ = authFields
	// authDescCreatedAt is the schema descriptor for createdAt field.
	authDescCreatedAt := authMixinFields0[0].Descriptor()
	// auth.DefaultCreatedAt holds the default value on creation for the createdAt field.
	auth.DefaultCreatedAt = authDescCreatedAt.Default.(func() time.Time)
	// authDescUpdatedAt is the schema descriptor for updatedAt field.
	authDescUpdatedAt := authMixinFields0[1].Descriptor()
	// auth.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	auth.DefaultUpdatedAt = authDescUpdatedAt.Default.(func() time.Time)
	// auth.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	auth.UpdateDefaultUpdatedAt = authDescUpdatedAt.UpdateDefault.(func() time.Time)
	bookingMixin := schema.Booking{}.Mixin()
	booking.Policy = privacy.NewPolicies(schema.Booking{})
	booking.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := booking.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	bookingMixinFields0 := bookingMixin[0].Fields()
	_ = bookingMixinFields0
	bookingFields := schema.Booking{}.Fields()
	_ = bookingFields
	// bookingDescCreatedAt is the schema descriptor for createdAt field.
	bookingDescCreatedAt := bookingMixinFields0[0].Descriptor()
	// booking.DefaultCreatedAt holds the default value on creation for the createdAt field.
	booking.DefaultCreatedAt = bookingDescCreatedAt.Default.(func() time.Time)
	// bookingDescUpdatedAt is the schema descriptor for updatedAt field.
	bookingDescUpdatedAt := bookingMixinFields0[1].Descriptor()
	// booking.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	booking.DefaultUpdatedAt = bookingDescUpdatedAt.Default.(func() time.Time)
	// booking.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	booking.UpdateDefaultUpdatedAt = bookingDescUpdatedAt.UpdateDefault.(func() time.Time)
	bookingmetadatum.Policy = privacy.NewPolicies(schema.BookingMetadatum{})
	bookingmetadatum.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := bookingmetadatum.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	organizationMixin := schema.Organization{}.Mixin()
	organizationMixinFields0 := organizationMixin[0].Fields()
	_ = organizationMixinFields0
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescCreatedAt is the schema descriptor for createdAt field.
	organizationDescCreatedAt := organizationMixinFields0[0].Descriptor()
	// organization.DefaultCreatedAt holds the default value on creation for the createdAt field.
	organization.DefaultCreatedAt = organizationDescCreatedAt.Default.(func() time.Time)
	// organizationDescUpdatedAt is the schema descriptor for updatedAt field.
	organizationDescUpdatedAt := organizationMixinFields0[1].Descriptor()
	// organization.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	organization.DefaultUpdatedAt = organizationDescUpdatedAt.Default.(func() time.Time)
	// organization.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	organization.UpdateDefaultUpdatedAt = organizationDescUpdatedAt.UpdateDefault.(func() time.Time)
	resourceMixin := schema.Resource{}.Mixin()
	resource.Policy = privacy.NewPolicies(schema.Resource{})
	resource.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := resource.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	resourceMixinFields0 := resourceMixin[0].Fields()
	_ = resourceMixinFields0
	resourceFields := schema.Resource{}.Fields()
	_ = resourceFields
	// resourceDescCreatedAt is the schema descriptor for createdAt field.
	resourceDescCreatedAt := resourceMixinFields0[0].Descriptor()
	// resource.DefaultCreatedAt holds the default value on creation for the createdAt field.
	resource.DefaultCreatedAt = resourceDescCreatedAt.Default.(func() time.Time)
	// resourceDescUpdatedAt is the schema descriptor for updatedAt field.
	resourceDescUpdatedAt := resourceMixinFields0[1].Descriptor()
	// resource.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	resource.DefaultUpdatedAt = resourceDescUpdatedAt.Default.(func() time.Time)
	// resource.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	resource.UpdateDefaultUpdatedAt = resourceDescUpdatedAt.UpdateDefault.(func() time.Time)
	slot.Policy = privacy.NewPolicies(schema.Slot{})
	slot.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := slot.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	tokenMixin := schema.Token{}.Mixin()
	token.Policy = privacy.NewPolicies(schema.Token{})
	token.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := token.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	tokenMixinFields0 := tokenMixin[0].Fields()
	_ = tokenMixinFields0
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescCreatedAt is the schema descriptor for createdAt field.
	tokenDescCreatedAt := tokenMixinFields0[0].Descriptor()
	// token.DefaultCreatedAt holds the default value on creation for the createdAt field.
	token.DefaultCreatedAt = tokenDescCreatedAt.Default.(func() time.Time)
	// tokenDescUpdatedAt is the schema descriptor for updatedAt field.
	tokenDescUpdatedAt := tokenMixinFields0[1].Descriptor()
	// token.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	token.DefaultUpdatedAt = tokenDescUpdatedAt.Default.(func() time.Time)
	// token.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	token.UpdateDefaultUpdatedAt = tokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenFields[0].Descriptor()
	// token.DefaultID holds the default value on creation for the id field.
	token.DefaultID = tokenDescID.Default.(string)
	unavailabilityMixin := schema.Unavailability{}.Mixin()
	unavailability.Policy = privacy.NewPolicies(schema.Unavailability{})
	unavailability.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := unavailability.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	unavailabilityMixinFields0 := unavailabilityMixin[0].Fields()
	_ = unavailabilityMixinFields0
	unavailabilityFields := schema.Unavailability{}.Fields()
	_ = unavailabilityFields
	// unavailabilityDescCreatedAt is the schema descriptor for createdAt field.
	unavailabilityDescCreatedAt := unavailabilityMixinFields0[0].Descriptor()
	// unavailability.DefaultCreatedAt holds the default value on creation for the createdAt field.
	unavailability.DefaultCreatedAt = unavailabilityDescCreatedAt.Default.(func() time.Time)
	// unavailabilityDescUpdatedAt is the schema descriptor for updatedAt field.
	unavailabilityDescUpdatedAt := unavailabilityMixinFields0[1].Descriptor()
	// unavailability.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	unavailability.DefaultUpdatedAt = unavailabilityDescUpdatedAt.Default.(func() time.Time)
	// unavailability.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	unavailability.UpdateDefaultUpdatedAt = unavailabilityDescUpdatedAt.UpdateDefault.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for createdAt field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the createdAt field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updatedAt field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}

const (
	Version = "v0.9.1"                                          // Version of ent codegen.
	Sum     = "h1:IG8andyeD79GG24U8Q+1Y45hQXj6gY5evSBcva5gtBk=" // Sum of ent codegen.
)
