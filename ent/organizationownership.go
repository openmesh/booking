// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/organizationownership"
	"github.com/openmesh/booking/ent/user"
)

// OrganizationOwnership is the model entity for the OrganizationOwnership schema.
type OrganizationOwnership struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// OrganizationId holds the value of the "organizationId" field.
	OrganizationId int `json:"organizationId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationOwnershipQuery when eager-loading is set.
	Edges OrganizationOwnershipEdges `json:"edges"`
}

// OrganizationOwnershipEdges holds the relations/edges for other nodes in the graph.
type OrganizationOwnershipEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationOwnershipEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationOwnershipEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[1] {
		if e.Organization == nil {
			// The edge organization was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationOwnership) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationownership.FieldID, organizationownership.FieldUserId, organizationownership.FieldOrganizationId:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationOwnership", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationOwnership fields.
func (oo *OrganizationOwnership) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationownership.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oo.ID = int(value.Int64)
		case organizationownership.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				oo.UserId = int(value.Int64)
			}
		case organizationownership.FieldOrganizationId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field organizationId", values[i])
			} else if value.Valid {
				oo.OrganizationId = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the OrganizationOwnership entity.
func (oo *OrganizationOwnership) QueryUser() *UserQuery {
	return (&OrganizationOwnershipClient{config: oo.config}).QueryUser(oo)
}

// QueryOrganization queries the "organization" edge of the OrganizationOwnership entity.
func (oo *OrganizationOwnership) QueryOrganization() *OrganizationQuery {
	return (&OrganizationOwnershipClient{config: oo.config}).QueryOrganization(oo)
}

// Update returns a builder for updating this OrganizationOwnership.
// Note that you need to call OrganizationOwnership.Unwrap() before calling this method if this OrganizationOwnership
// was returned from a transaction, and the transaction was committed or rolled back.
func (oo *OrganizationOwnership) Update() *OrganizationOwnershipUpdateOne {
	return (&OrganizationOwnershipClient{config: oo.config}).UpdateOne(oo)
}

// Unwrap unwraps the OrganizationOwnership entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oo *OrganizationOwnership) Unwrap() *OrganizationOwnership {
	tx, ok := oo.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationOwnership is not a transactional entity")
	}
	oo.config.driver = tx.drv
	return oo
}

// String implements the fmt.Stringer.
func (oo *OrganizationOwnership) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationOwnership(")
	builder.WriteString(fmt.Sprintf("id=%v", oo.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", oo.UserId))
	builder.WriteString(", organizationId=")
	builder.WriteString(fmt.Sprintf("%v", oo.OrganizationId))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationOwnerships is a parsable slice of OrganizationOwnership.
type OrganizationOwnerships []*OrganizationOwnership

func (oo OrganizationOwnerships) config(cfg config) {
	for _i := range oo {
		oo[_i].config = cfg
	}
}
