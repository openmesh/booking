// Code generated by entc, DO NOT EDIT.

package slot

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmesh/booking/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDay), v))
	})
}

// StartTime applies equality check predicate on the "startTime" field. It's identical to StartTimeEQ.
func StartTime(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "endTime" field. It's identical to EndTimeEQ.
func EndTime(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// ResourceId applies equality check predicate on the "resourceId" field. It's identical to ResourceIdEQ.
func ResourceId(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceId), v))
	})
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDay), v))
	})
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDay), v))
	})
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...string) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDay), v...))
	})
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...string) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDay), v...))
	})
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDay), v))
	})
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDay), v))
	})
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDay), v))
	})
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDay), v))
	})
}

// DayContains applies the Contains predicate on the "day" field.
func DayContains(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDay), v))
	})
}

// DayHasPrefix applies the HasPrefix predicate on the "day" field.
func DayHasPrefix(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDay), v))
	})
}

// DayHasSuffix applies the HasSuffix predicate on the "day" field.
func DayHasSuffix(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDay), v))
	})
}

// DayEqualFold applies the EqualFold predicate on the "day" field.
func DayEqualFold(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDay), v))
	})
}

// DayContainsFold applies the ContainsFold predicate on the "day" field.
func DayContainsFold(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDay), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "startTime" field.
func StartTimeEQ(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "startTime" field.
func StartTimeNEQ(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "startTime" field.
func StartTimeIn(vs ...string) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "startTime" field.
func StartTimeNotIn(vs ...string) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "startTime" field.
func StartTimeGT(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "startTime" field.
func StartTimeGTE(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "startTime" field.
func StartTimeLT(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "startTime" field.
func StartTimeLTE(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// StartTimeContains applies the Contains predicate on the "startTime" field.
func StartTimeContains(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStartTime), v))
	})
}

// StartTimeHasPrefix applies the HasPrefix predicate on the "startTime" field.
func StartTimeHasPrefix(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStartTime), v))
	})
}

// StartTimeHasSuffix applies the HasSuffix predicate on the "startTime" field.
func StartTimeHasSuffix(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStartTime), v))
	})
}

// StartTimeEqualFold applies the EqualFold predicate on the "startTime" field.
func StartTimeEqualFold(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStartTime), v))
	})
}

// StartTimeContainsFold applies the ContainsFold predicate on the "startTime" field.
func StartTimeContainsFold(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStartTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "endTime" field.
func EndTimeEQ(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "endTime" field.
func EndTimeNEQ(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "endTime" field.
func EndTimeIn(vs ...string) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "endTime" field.
func EndTimeNotIn(vs ...string) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "endTime" field.
func EndTimeGT(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "endTime" field.
func EndTimeGTE(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "endTime" field.
func EndTimeLT(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "endTime" field.
func EndTimeLTE(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// EndTimeContains applies the Contains predicate on the "endTime" field.
func EndTimeContains(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEndTime), v))
	})
}

// EndTimeHasPrefix applies the HasPrefix predicate on the "endTime" field.
func EndTimeHasPrefix(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEndTime), v))
	})
}

// EndTimeHasSuffix applies the HasSuffix predicate on the "endTime" field.
func EndTimeHasSuffix(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEndTime), v))
	})
}

// EndTimeEqualFold applies the EqualFold predicate on the "endTime" field.
func EndTimeEqualFold(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEndTime), v))
	})
}

// EndTimeContainsFold applies the ContainsFold predicate on the "endTime" field.
func EndTimeContainsFold(v string) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEndTime), v))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// QuantityIsNil applies the IsNil predicate on the "quantity" field.
func QuantityIsNil() predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantity)))
	})
}

// QuantityNotNil applies the NotNil predicate on the "quantity" field.
func QuantityNotNil() predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantity)))
	})
}

// ResourceIdEQ applies the EQ predicate on the "resourceId" field.
func ResourceIdEQ(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceId), v))
	})
}

// ResourceIdNEQ applies the NEQ predicate on the "resourceId" field.
func ResourceIdNEQ(v int) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceId), v))
	})
}

// ResourceIdIn applies the In predicate on the "resourceId" field.
func ResourceIdIn(vs ...int) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourceId), v...))
	})
}

// ResourceIdNotIn applies the NotIn predicate on the "resourceId" field.
func ResourceIdNotIn(vs ...int) predicate.Slot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Slot(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourceId), v...))
	})
}

// HasResource applies the HasEdge predicate on the "resource" edge.
func HasResource() predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ResourceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResourceTable, ResourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResourceWith applies the HasEdge predicate on the "resource" edge with a given conditions (other predicates).
func HasResourceWith(preds ...predicate.Resource) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ResourceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResourceTable, ResourceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Slot) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Slot) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Slot) predicate.Slot {
	return predicate.Slot(func(s *sql.Selector) {
		p(s.Not())
	})
}
