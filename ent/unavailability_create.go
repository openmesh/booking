// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/resource"
	"github.com/openmesh/booking/ent/unavailability"
)

// UnavailabilityCreate is the builder for creating a Unavailability entity.
type UnavailabilityCreate struct {
	config
	mutation *UnavailabilityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (uc *UnavailabilityCreate) SetCreatedAt(t time.Time) *UnavailabilityCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (uc *UnavailabilityCreate) SetNillableCreatedAt(t *time.Time) *UnavailabilityCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updatedAt" field.
func (uc *UnavailabilityCreate) SetUpdatedAt(t time.Time) *UnavailabilityCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (uc *UnavailabilityCreate) SetNillableUpdatedAt(t *time.Time) *UnavailabilityCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetStartTime sets the "startTime" field.
func (uc *UnavailabilityCreate) SetStartTime(t time.Time) *UnavailabilityCreate {
	uc.mutation.SetStartTime(t)
	return uc
}

// SetEndTime sets the "endTime" field.
func (uc *UnavailabilityCreate) SetEndTime(t time.Time) *UnavailabilityCreate {
	uc.mutation.SetEndTime(t)
	return uc
}

// SetResourceId sets the "resourceId" field.
func (uc *UnavailabilityCreate) SetResourceId(i int) *UnavailabilityCreate {
	uc.mutation.SetResourceId(i)
	return uc
}

// SetOrganizationId sets the "organizationId" field.
func (uc *UnavailabilityCreate) SetOrganizationId(i int) *UnavailabilityCreate {
	uc.mutation.SetOrganizationId(i)
	return uc
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (uc *UnavailabilityCreate) SetResourceID(id int) *UnavailabilityCreate {
	uc.mutation.SetResourceID(id)
	return uc
}

// SetResource sets the "resource" edge to the Resource entity.
func (uc *UnavailabilityCreate) SetResource(r *Resource) *UnavailabilityCreate {
	return uc.SetResourceID(r.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (uc *UnavailabilityCreate) SetOrganizationID(id int) *UnavailabilityCreate {
	uc.mutation.SetOrganizationID(id)
	return uc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (uc *UnavailabilityCreate) SetOrganization(o *Organization) *UnavailabilityCreate {
	return uc.SetOrganizationID(o.ID)
}

// Mutation returns the UnavailabilityMutation object of the builder.
func (uc *UnavailabilityCreate) Mutation() *UnavailabilityMutation {
	return uc.mutation
}

// Save creates the Unavailability in the database.
func (uc *UnavailabilityCreate) Save(ctx context.Context) (*Unavailability, error) {
	var (
		err  error
		node *Unavailability
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnavailabilityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UnavailabilityCreate) SaveX(ctx context.Context) *Unavailability {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UnavailabilityCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UnavailabilityCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UnavailabilityCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := unavailability.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := unavailability.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UnavailabilityCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := uc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "startTime", err: errors.New(`ent: missing required field "startTime"`)}
	}
	if _, ok := uc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "endTime", err: errors.New(`ent: missing required field "endTime"`)}
	}
	if _, ok := uc.mutation.ResourceId(); !ok {
		return &ValidationError{Name: "resourceId", err: errors.New(`ent: missing required field "resourceId"`)}
	}
	if _, ok := uc.mutation.OrganizationId(); !ok {
		return &ValidationError{Name: "organizationId", err: errors.New(`ent: missing required field "organizationId"`)}
	}
	if _, ok := uc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource", err: errors.New("ent: missing required edge \"resource\"")}
	}
	if _, ok := uc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New("ent: missing required edge \"organization\"")}
	}
	return nil
}

func (uc *UnavailabilityCreate) sqlSave(ctx context.Context) (*Unavailability, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UnavailabilityCreate) createSpec() (*Unavailability, *sqlgraph.CreateSpec) {
	var (
		_node = &Unavailability{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: unavailability.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unavailability.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unavailability.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unavailability.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unavailability.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := uc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unavailability.FieldEndTime,
		})
		_node.EndTime = value
	}
	if nodes := uc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unavailability.ResourceTable,
			Columns: []string{unavailability.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unavailability.OrganizationTable,
			Columns: []string{unavailability.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UnavailabilityCreateBulk is the builder for creating many Unavailability entities in bulk.
type UnavailabilityCreateBulk struct {
	config
	builders []*UnavailabilityCreate
}

// Save creates the Unavailability entities in the database.
func (ucb *UnavailabilityCreateBulk) Save(ctx context.Context) ([]*Unavailability, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Unavailability, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UnavailabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UnavailabilityCreateBulk) SaveX(ctx context.Context) []*Unavailability {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UnavailabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UnavailabilityCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
