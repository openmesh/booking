// Code generated by entc, DO NOT EDIT.

package auth

import (
	"time"
)

const (
	// Label holds the string label denoting the auth type in the database.
	Label = "auth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldSourceId holds the string denoting the sourceid field in the database.
	FieldSourceId = "source_id"
	// FieldAccessToken holds the string denoting the accesstoken field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refreshtoken field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldExpiry holds the string denoting the expiry field in the database.
	FieldExpiry = "expiry"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the auth in the database.
	Table = "auths"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "auths"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for auth fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSource,
	FieldSourceId,
	FieldAccessToken,
	FieldRefreshToken,
	FieldExpiry,
	FieldUserId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)
