// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/organizationownership"
	"github.com/openmesh/booking/ent/predicate"
	"github.com/openmesh/booking/ent/user"
)

// OrganizationOwnershipUpdate is the builder for updating OrganizationOwnership entities.
type OrganizationOwnershipUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationOwnershipMutation
}

// Where appends a list predicates to the OrganizationOwnershipUpdate builder.
func (oou *OrganizationOwnershipUpdate) Where(ps ...predicate.OrganizationOwnership) *OrganizationOwnershipUpdate {
	oou.mutation.Where(ps...)
	return oou
}

// SetUserId sets the "userId" field.
func (oou *OrganizationOwnershipUpdate) SetUserId(i int) *OrganizationOwnershipUpdate {
	oou.mutation.SetUserId(i)
	return oou
}

// SetOrganizationId sets the "organizationId" field.
func (oou *OrganizationOwnershipUpdate) SetOrganizationId(i int) *OrganizationOwnershipUpdate {
	oou.mutation.SetOrganizationId(i)
	return oou
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oou *OrganizationOwnershipUpdate) SetUserID(id int) *OrganizationOwnershipUpdate {
	oou.mutation.SetUserID(id)
	return oou
}

// SetUser sets the "user" edge to the User entity.
func (oou *OrganizationOwnershipUpdate) SetUser(u *User) *OrganizationOwnershipUpdate {
	return oou.SetUserID(u.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oou *OrganizationOwnershipUpdate) SetOrganizationID(id int) *OrganizationOwnershipUpdate {
	oou.mutation.SetOrganizationID(id)
	return oou
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oou *OrganizationOwnershipUpdate) SetOrganization(o *Organization) *OrganizationOwnershipUpdate {
	return oou.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationOwnershipMutation object of the builder.
func (oou *OrganizationOwnershipUpdate) Mutation() *OrganizationOwnershipMutation {
	return oou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (oou *OrganizationOwnershipUpdate) ClearUser() *OrganizationOwnershipUpdate {
	oou.mutation.ClearUser()
	return oou
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oou *OrganizationOwnershipUpdate) ClearOrganization() *OrganizationOwnershipUpdate {
	oou.mutation.ClearOrganization()
	return oou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oou *OrganizationOwnershipUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(oou.hooks) == 0 {
		if err = oou.check(); err != nil {
			return 0, err
		}
		affected, err = oou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationOwnershipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oou.check(); err != nil {
				return 0, err
			}
			oou.mutation = mutation
			affected, err = oou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oou.hooks) - 1; i >= 0; i-- {
			if oou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oou *OrganizationOwnershipUpdate) SaveX(ctx context.Context) int {
	affected, err := oou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oou *OrganizationOwnershipUpdate) Exec(ctx context.Context) error {
	_, err := oou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oou *OrganizationOwnershipUpdate) ExecX(ctx context.Context) {
	if err := oou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oou *OrganizationOwnershipUpdate) check() error {
	if _, ok := oou.mutation.UserID(); oou.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := oou.mutation.OrganizationID(); oou.mutation.OrganizationCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"organization\"")
	}
	return nil
}

func (oou *OrganizationOwnershipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationownership.Table,
			Columns: organizationownership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organizationownership.FieldID,
			},
		},
	}
	if ps := oou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.UserTable,
			Columns: []string{organizationownership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.UserTable,
			Columns: []string{organizationownership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oou.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.OrganizationTable,
			Columns: []string{organizationownership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.OrganizationTable,
			Columns: []string{organizationownership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationownership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrganizationOwnershipUpdateOne is the builder for updating a single OrganizationOwnership entity.
type OrganizationOwnershipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationOwnershipMutation
}

// SetUserId sets the "userId" field.
func (oouo *OrganizationOwnershipUpdateOne) SetUserId(i int) *OrganizationOwnershipUpdateOne {
	oouo.mutation.SetUserId(i)
	return oouo
}

// SetOrganizationId sets the "organizationId" field.
func (oouo *OrganizationOwnershipUpdateOne) SetOrganizationId(i int) *OrganizationOwnershipUpdateOne {
	oouo.mutation.SetOrganizationId(i)
	return oouo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oouo *OrganizationOwnershipUpdateOne) SetUserID(id int) *OrganizationOwnershipUpdateOne {
	oouo.mutation.SetUserID(id)
	return oouo
}

// SetUser sets the "user" edge to the User entity.
func (oouo *OrganizationOwnershipUpdateOne) SetUser(u *User) *OrganizationOwnershipUpdateOne {
	return oouo.SetUserID(u.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oouo *OrganizationOwnershipUpdateOne) SetOrganizationID(id int) *OrganizationOwnershipUpdateOne {
	oouo.mutation.SetOrganizationID(id)
	return oouo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oouo *OrganizationOwnershipUpdateOne) SetOrganization(o *Organization) *OrganizationOwnershipUpdateOne {
	return oouo.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationOwnershipMutation object of the builder.
func (oouo *OrganizationOwnershipUpdateOne) Mutation() *OrganizationOwnershipMutation {
	return oouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (oouo *OrganizationOwnershipUpdateOne) ClearUser() *OrganizationOwnershipUpdateOne {
	oouo.mutation.ClearUser()
	return oouo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oouo *OrganizationOwnershipUpdateOne) ClearOrganization() *OrganizationOwnershipUpdateOne {
	oouo.mutation.ClearOrganization()
	return oouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oouo *OrganizationOwnershipUpdateOne) Select(field string, fields ...string) *OrganizationOwnershipUpdateOne {
	oouo.fields = append([]string{field}, fields...)
	return oouo
}

// Save executes the query and returns the updated OrganizationOwnership entity.
func (oouo *OrganizationOwnershipUpdateOne) Save(ctx context.Context) (*OrganizationOwnership, error) {
	var (
		err  error
		node *OrganizationOwnership
	)
	if len(oouo.hooks) == 0 {
		if err = oouo.check(); err != nil {
			return nil, err
		}
		node, err = oouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationOwnershipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oouo.check(); err != nil {
				return nil, err
			}
			oouo.mutation = mutation
			node, err = oouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oouo.hooks) - 1; i >= 0; i-- {
			if oouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oouo *OrganizationOwnershipUpdateOne) SaveX(ctx context.Context) *OrganizationOwnership {
	node, err := oouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oouo *OrganizationOwnershipUpdateOne) Exec(ctx context.Context) error {
	_, err := oouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oouo *OrganizationOwnershipUpdateOne) ExecX(ctx context.Context) {
	if err := oouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oouo *OrganizationOwnershipUpdateOne) check() error {
	if _, ok := oouo.mutation.UserID(); oouo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := oouo.mutation.OrganizationID(); oouo.mutation.OrganizationCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"organization\"")
	}
	return nil
}

func (oouo *OrganizationOwnershipUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationOwnership, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organizationownership.Table,
			Columns: organizationownership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organizationownership.FieldID,
			},
		},
	}
	id, ok := oouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrganizationOwnership.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationownership.FieldID)
		for _, f := range fields {
			if !organizationownership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationownership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.UserTable,
			Columns: []string{organizationownership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.UserTable,
			Columns: []string{organizationownership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oouo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.OrganizationTable,
			Columns: []string{organizationownership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.OrganizationTable,
			Columns: []string{organizationownership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationOwnership{config: oouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationownership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
