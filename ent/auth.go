// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openmesh/booking/ent/auth"
	"github.com/openmesh/booking/ent/user"
)

// Auth is the model entity for the Auth schema.
type Auth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// SourceId holds the value of the "sourceId" field.
	SourceId string `json:"sourceId,omitempty"`
	// AccessToken holds the value of the "accessToken" field.
	AccessToken *string `json:"accessToken,omitempty"`
	// RefreshToken holds the value of the "refreshToken" field.
	RefreshToken *string `json:"refreshToken,omitempty"`
	// Expiry holds the value of the "expiry" field.
	Expiry *time.Time `json:"expiry,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthQuery when eager-loading is set.
	Edges AuthEdges `json:"edges"`
}

// AuthEdges holds the relations/edges for other nodes in the graph.
type AuthEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Auth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case auth.FieldID, auth.FieldUserId:
			values[i] = new(sql.NullInt64)
		case auth.FieldSource, auth.FieldSourceId, auth.FieldAccessToken, auth.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case auth.FieldCreatedAt, auth.FieldUpdatedAt, auth.FieldExpiry:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Auth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Auth fields.
func (a *Auth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case auth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case auth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case auth.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				a.Source = value.String
			}
		case auth.FieldSourceId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sourceId", values[i])
			} else if value.Valid {
				a.SourceId = value.String
			}
		case auth.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accessToken", values[i])
			} else if value.Valid {
				a.AccessToken = new(string)
				*a.AccessToken = value.String
			}
		case auth.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refreshToken", values[i])
			} else if value.Valid {
				a.RefreshToken = new(string)
				*a.RefreshToken = value.String
			}
		case auth.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				a.Expiry = new(time.Time)
				*a.Expiry = value.Time
			}
		case auth.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				a.UserId = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Auth entity.
func (a *Auth) QueryUser() *UserQuery {
	return (&AuthClient{config: a.config}).QueryUser(a)
}

// Update returns a builder for updating this Auth.
// Note that you need to call Auth.Unwrap() before calling this method if this Auth
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Auth) Update() *AuthUpdateOne {
	return (&AuthClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Auth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Auth) Unwrap() *Auth {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Auth is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Auth) String() string {
	var builder strings.Builder
	builder.WriteString("Auth(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", source=")
	builder.WriteString(a.Source)
	builder.WriteString(", sourceId=")
	builder.WriteString(a.SourceId)
	if v := a.AccessToken; v != nil {
		builder.WriteString(", accessToken=")
		builder.WriteString(*v)
	}
	if v := a.RefreshToken; v != nil {
		builder.WriteString(", refreshToken=")
		builder.WriteString(*v)
	}
	if v := a.Expiry; v != nil {
		builder.WriteString(", expiry=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", a.UserId))
	builder.WriteByte(')')
	return builder.String()
}

// Auths is a parsable slice of Auth.
type Auths []*Auth

func (a Auths) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
