// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/openmesh/booking/ent/migrate"

	"github.com/openmesh/booking/ent/auth"
	"github.com/openmesh/booking/ent/booking"
	"github.com/openmesh/booking/ent/bookingmetadatum"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/organizationownership"
	"github.com/openmesh/booking/ent/resource"
	"github.com/openmesh/booking/ent/slot"
	"github.com/openmesh/booking/ent/unavailability"
	"github.com/openmesh/booking/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Auth is the client for interacting with the Auth builders.
	Auth *AuthClient
	// Booking is the client for interacting with the Booking builders.
	Booking *BookingClient
	// BookingMetadatum is the client for interacting with the BookingMetadatum builders.
	BookingMetadatum *BookingMetadatumClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationOwnership is the client for interacting with the OrganizationOwnership builders.
	OrganizationOwnership *OrganizationOwnershipClient
	// Resource is the client for interacting with the Resource builders.
	Resource *ResourceClient
	// Slot is the client for interacting with the Slot builders.
	Slot *SlotClient
	// Unavailability is the client for interacting with the Unavailability builders.
	Unavailability *UnavailabilityClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Auth = NewAuthClient(c.config)
	c.Booking = NewBookingClient(c.config)
	c.BookingMetadatum = NewBookingMetadatumClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationOwnership = NewOrganizationOwnershipClient(c.config)
	c.Resource = NewResourceClient(c.config)
	c.Slot = NewSlotClient(c.config)
	c.Unavailability = NewUnavailabilityClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Auth:                  NewAuthClient(cfg),
		Booking:               NewBookingClient(cfg),
		BookingMetadatum:      NewBookingMetadatumClient(cfg),
		Organization:          NewOrganizationClient(cfg),
		OrganizationOwnership: NewOrganizationOwnershipClient(cfg),
		Resource:              NewResourceClient(cfg),
		Slot:                  NewSlotClient(cfg),
		Unavailability:        NewUnavailabilityClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                cfg,
		Auth:                  NewAuthClient(cfg),
		Booking:               NewBookingClient(cfg),
		BookingMetadatum:      NewBookingMetadatumClient(cfg),
		Organization:          NewOrganizationClient(cfg),
		OrganizationOwnership: NewOrganizationOwnershipClient(cfg),
		Resource:              NewResourceClient(cfg),
		Slot:                  NewSlotClient(cfg),
		Unavailability:        NewUnavailabilityClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Auth.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Auth.Use(hooks...)
	c.Booking.Use(hooks...)
	c.BookingMetadatum.Use(hooks...)
	c.Organization.Use(hooks...)
	c.OrganizationOwnership.Use(hooks...)
	c.Resource.Use(hooks...)
	c.Slot.Use(hooks...)
	c.Unavailability.Use(hooks...)
	c.User.Use(hooks...)
}

// AuthClient is a client for the Auth schema.
type AuthClient struct {
	config
}

// NewAuthClient returns a client for the Auth from the given config.
func NewAuthClient(c config) *AuthClient {
	return &AuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auth.Hooks(f(g(h())))`.
func (c *AuthClient) Use(hooks ...Hook) {
	c.hooks.Auth = append(c.hooks.Auth, hooks...)
}

// Create returns a create builder for Auth.
func (c *AuthClient) Create() *AuthCreate {
	mutation := newAuthMutation(c.config, OpCreate)
	return &AuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Auth entities.
func (c *AuthClient) CreateBulk(builders ...*AuthCreate) *AuthCreateBulk {
	return &AuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Auth.
func (c *AuthClient) Update() *AuthUpdate {
	mutation := newAuthMutation(c.config, OpUpdate)
	return &AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthClient) UpdateOne(a *Auth) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuth(a))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthClient) UpdateOneID(id int) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuthID(id))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Auth.
func (c *AuthClient) Delete() *AuthDelete {
	mutation := newAuthMutation(c.config, OpDelete)
	return &AuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthClient) DeleteOne(a *Auth) *AuthDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthClient) DeleteOneID(id int) *AuthDeleteOne {
	builder := c.Delete().Where(auth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthDeleteOne{builder}
}

// Query returns a query builder for Auth.
func (c *AuthClient) Query() *AuthQuery {
	return &AuthQuery{
		config: c.config,
	}
}

// Get returns a Auth entity by its id.
func (c *AuthClient) Get(ctx context.Context, id int) (*Auth, error) {
	return c.Query().Where(auth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthClient) GetX(ctx context.Context, id int) *Auth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Auth.
func (c *AuthClient) QueryUser(a *Auth) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(auth.Table, auth.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, auth.UserTable, auth.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthClient) Hooks() []Hook {
	return c.hooks.Auth
}

// BookingClient is a client for the Booking schema.
type BookingClient struct {
	config
}

// NewBookingClient returns a client for the Booking from the given config.
func NewBookingClient(c config) *BookingClient {
	return &BookingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `booking.Hooks(f(g(h())))`.
func (c *BookingClient) Use(hooks ...Hook) {
	c.hooks.Booking = append(c.hooks.Booking, hooks...)
}

// Create returns a create builder for Booking.
func (c *BookingClient) Create() *BookingCreate {
	mutation := newBookingMutation(c.config, OpCreate)
	return &BookingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Booking entities.
func (c *BookingClient) CreateBulk(builders ...*BookingCreate) *BookingCreateBulk {
	return &BookingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Booking.
func (c *BookingClient) Update() *BookingUpdate {
	mutation := newBookingMutation(c.config, OpUpdate)
	return &BookingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookingClient) UpdateOne(b *Booking) *BookingUpdateOne {
	mutation := newBookingMutation(c.config, OpUpdateOne, withBooking(b))
	return &BookingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookingClient) UpdateOneID(id int) *BookingUpdateOne {
	mutation := newBookingMutation(c.config, OpUpdateOne, withBookingID(id))
	return &BookingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Booking.
func (c *BookingClient) Delete() *BookingDelete {
	mutation := newBookingMutation(c.config, OpDelete)
	return &BookingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BookingClient) DeleteOne(b *Booking) *BookingDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BookingClient) DeleteOneID(id int) *BookingDeleteOne {
	builder := c.Delete().Where(booking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookingDeleteOne{builder}
}

// Query returns a query builder for Booking.
func (c *BookingClient) Query() *BookingQuery {
	return &BookingQuery{
		config: c.config,
	}
}

// Get returns a Booking entity by its id.
func (c *BookingClient) Get(ctx context.Context, id int) (*Booking, error) {
	return c.Query().Where(booking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookingClient) GetX(ctx context.Context, id int) *Booking {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a Booking.
func (c *BookingClient) QueryMetadata(b *Booking) *BookingMetadatumQuery {
	query := &BookingMetadatumQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(booking.Table, booking.FieldID, id),
			sqlgraph.To(bookingmetadatum.Table, bookingmetadatum.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, booking.MetadataTable, booking.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResource queries the resource edge of a Booking.
func (c *BookingClient) QueryResource(b *Booking) *ResourceQuery {
	query := &ResourceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(booking.Table, booking.FieldID, id),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, booking.ResourceTable, booking.ResourceColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookingClient) Hooks() []Hook {
	return c.hooks.Booking
}

// BookingMetadatumClient is a client for the BookingMetadatum schema.
type BookingMetadatumClient struct {
	config
}

// NewBookingMetadatumClient returns a client for the BookingMetadatum from the given config.
func NewBookingMetadatumClient(c config) *BookingMetadatumClient {
	return &BookingMetadatumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bookingmetadatum.Hooks(f(g(h())))`.
func (c *BookingMetadatumClient) Use(hooks ...Hook) {
	c.hooks.BookingMetadatum = append(c.hooks.BookingMetadatum, hooks...)
}

// Create returns a create builder for BookingMetadatum.
func (c *BookingMetadatumClient) Create() *BookingMetadatumCreate {
	mutation := newBookingMetadatumMutation(c.config, OpCreate)
	return &BookingMetadatumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BookingMetadatum entities.
func (c *BookingMetadatumClient) CreateBulk(builders ...*BookingMetadatumCreate) *BookingMetadatumCreateBulk {
	return &BookingMetadatumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BookingMetadatum.
func (c *BookingMetadatumClient) Update() *BookingMetadatumUpdate {
	mutation := newBookingMetadatumMutation(c.config, OpUpdate)
	return &BookingMetadatumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookingMetadatumClient) UpdateOne(bm *BookingMetadatum) *BookingMetadatumUpdateOne {
	mutation := newBookingMetadatumMutation(c.config, OpUpdateOne, withBookingMetadatum(bm))
	return &BookingMetadatumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookingMetadatumClient) UpdateOneID(id int) *BookingMetadatumUpdateOne {
	mutation := newBookingMetadatumMutation(c.config, OpUpdateOne, withBookingMetadatumID(id))
	return &BookingMetadatumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BookingMetadatum.
func (c *BookingMetadatumClient) Delete() *BookingMetadatumDelete {
	mutation := newBookingMetadatumMutation(c.config, OpDelete)
	return &BookingMetadatumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BookingMetadatumClient) DeleteOne(bm *BookingMetadatum) *BookingMetadatumDeleteOne {
	return c.DeleteOneID(bm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BookingMetadatumClient) DeleteOneID(id int) *BookingMetadatumDeleteOne {
	builder := c.Delete().Where(bookingmetadatum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookingMetadatumDeleteOne{builder}
}

// Query returns a query builder for BookingMetadatum.
func (c *BookingMetadatumClient) Query() *BookingMetadatumQuery {
	return &BookingMetadatumQuery{
		config: c.config,
	}
}

// Get returns a BookingMetadatum entity by its id.
func (c *BookingMetadatumClient) Get(ctx context.Context, id int) (*BookingMetadatum, error) {
	return c.Query().Where(bookingmetadatum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookingMetadatumClient) GetX(ctx context.Context, id int) *BookingMetadatum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBooking queries the booking edge of a BookingMetadatum.
func (c *BookingMetadatumClient) QueryBooking(bm *BookingMetadatum) *BookingQuery {
	query := &BookingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookingmetadatum.Table, bookingmetadatum.FieldID, id),
			sqlgraph.To(booking.Table, booking.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookingmetadatum.BookingTable, bookingmetadatum.BookingColumn),
		)
		fromV = sqlgraph.Neighbors(bm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookingMetadatumClient) Hooks() []Hook {
	return c.hooks.BookingMetadatum
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Create returns a create builder for Organization.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id int) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrganizationClient) DeleteOneID(id int) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id int) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id int) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Organization.
func (c *OrganizationClient) QueryUsers(o *Organization) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.UsersTable, organization.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResources queries the resources edge of a Organization.
func (c *OrganizationClient) QueryResources(o *Organization) *ResourceQuery {
	query := &ResourceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ResourcesTable, organization.ResourcesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// OrganizationOwnershipClient is a client for the OrganizationOwnership schema.
type OrganizationOwnershipClient struct {
	config
}

// NewOrganizationOwnershipClient returns a client for the OrganizationOwnership from the given config.
func NewOrganizationOwnershipClient(c config) *OrganizationOwnershipClient {
	return &OrganizationOwnershipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationownership.Hooks(f(g(h())))`.
func (c *OrganizationOwnershipClient) Use(hooks ...Hook) {
	c.hooks.OrganizationOwnership = append(c.hooks.OrganizationOwnership, hooks...)
}

// Create returns a create builder for OrganizationOwnership.
func (c *OrganizationOwnershipClient) Create() *OrganizationOwnershipCreate {
	mutation := newOrganizationOwnershipMutation(c.config, OpCreate)
	return &OrganizationOwnershipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationOwnership entities.
func (c *OrganizationOwnershipClient) CreateBulk(builders ...*OrganizationOwnershipCreate) *OrganizationOwnershipCreateBulk {
	return &OrganizationOwnershipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationOwnership.
func (c *OrganizationOwnershipClient) Update() *OrganizationOwnershipUpdate {
	mutation := newOrganizationOwnershipMutation(c.config, OpUpdate)
	return &OrganizationOwnershipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationOwnershipClient) UpdateOne(oo *OrganizationOwnership) *OrganizationOwnershipUpdateOne {
	mutation := newOrganizationOwnershipMutation(c.config, OpUpdateOne, withOrganizationOwnership(oo))
	return &OrganizationOwnershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationOwnershipClient) UpdateOneID(id int) *OrganizationOwnershipUpdateOne {
	mutation := newOrganizationOwnershipMutation(c.config, OpUpdateOne, withOrganizationOwnershipID(id))
	return &OrganizationOwnershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationOwnership.
func (c *OrganizationOwnershipClient) Delete() *OrganizationOwnershipDelete {
	mutation := newOrganizationOwnershipMutation(c.config, OpDelete)
	return &OrganizationOwnershipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrganizationOwnershipClient) DeleteOne(oo *OrganizationOwnership) *OrganizationOwnershipDeleteOne {
	return c.DeleteOneID(oo.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrganizationOwnershipClient) DeleteOneID(id int) *OrganizationOwnershipDeleteOne {
	builder := c.Delete().Where(organizationownership.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationOwnershipDeleteOne{builder}
}

// Query returns a query builder for OrganizationOwnership.
func (c *OrganizationOwnershipClient) Query() *OrganizationOwnershipQuery {
	return &OrganizationOwnershipQuery{
		config: c.config,
	}
}

// Get returns a OrganizationOwnership entity by its id.
func (c *OrganizationOwnershipClient) Get(ctx context.Context, id int) (*OrganizationOwnership, error) {
	return c.Query().Where(organizationownership.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationOwnershipClient) GetX(ctx context.Context, id int) *OrganizationOwnership {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a OrganizationOwnership.
func (c *OrganizationOwnershipClient) QueryUser(oo *OrganizationOwnership) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationownership.Table, organizationownership.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organizationownership.UserTable, organizationownership.UserColumn),
		)
		fromV = sqlgraph.Neighbors(oo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a OrganizationOwnership.
func (c *OrganizationOwnershipClient) QueryOrganization(oo *OrganizationOwnership) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationownership.Table, organizationownership.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organizationownership.OrganizationTable, organizationownership.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(oo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationOwnershipClient) Hooks() []Hook {
	return c.hooks.OrganizationOwnership
}

// ResourceClient is a client for the Resource schema.
type ResourceClient struct {
	config
}

// NewResourceClient returns a client for the Resource from the given config.
func NewResourceClient(c config) *ResourceClient {
	return &ResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resource.Hooks(f(g(h())))`.
func (c *ResourceClient) Use(hooks ...Hook) {
	c.hooks.Resource = append(c.hooks.Resource, hooks...)
}

// Create returns a create builder for Resource.
func (c *ResourceClient) Create() *ResourceCreate {
	mutation := newResourceMutation(c.config, OpCreate)
	return &ResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Resource entities.
func (c *ResourceClient) CreateBulk(builders ...*ResourceCreate) *ResourceCreateBulk {
	return &ResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Resource.
func (c *ResourceClient) Update() *ResourceUpdate {
	mutation := newResourceMutation(c.config, OpUpdate)
	return &ResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceClient) UpdateOne(r *Resource) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResource(r))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceClient) UpdateOneID(id int) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResourceID(id))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Resource.
func (c *ResourceClient) Delete() *ResourceDelete {
	mutation := newResourceMutation(c.config, OpDelete)
	return &ResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceClient) DeleteOne(r *Resource) *ResourceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceClient) DeleteOneID(id int) *ResourceDeleteOne {
	builder := c.Delete().Where(resource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceDeleteOne{builder}
}

// Query returns a query builder for Resource.
func (c *ResourceClient) Query() *ResourceQuery {
	return &ResourceQuery{
		config: c.config,
	}
}

// Get returns a Resource entity by its id.
func (c *ResourceClient) Get(ctx context.Context, id int) (*Resource, error) {
	return c.Query().Where(resource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceClient) GetX(ctx context.Context, id int) *Resource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySlots queries the slots edge of a Resource.
func (c *ResourceClient) QuerySlots(r *Resource) *SlotQuery {
	query := &SlotQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(slot.Table, slot.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resource.SlotsTable, resource.SlotsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBookings queries the bookings edge of a Resource.
func (c *ResourceClient) QueryBookings(r *Resource) *BookingQuery {
	query := &BookingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(booking.Table, booking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resource.BookingsTable, resource.BookingsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUnavailabilities queries the unavailabilities edge of a Resource.
func (c *ResourceClient) QueryUnavailabilities(r *Resource) *UnavailabilityQuery {
	query := &UnavailabilityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(unavailability.Table, unavailability.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resource.UnavailabilitiesTable, resource.UnavailabilitiesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Resource.
func (c *ResourceClient) QueryOrganization(r *Resource) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resource.OrganizationTable, resource.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResourceClient) Hooks() []Hook {
	return c.hooks.Resource
}

// SlotClient is a client for the Slot schema.
type SlotClient struct {
	config
}

// NewSlotClient returns a client for the Slot from the given config.
func NewSlotClient(c config) *SlotClient {
	return &SlotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `slot.Hooks(f(g(h())))`.
func (c *SlotClient) Use(hooks ...Hook) {
	c.hooks.Slot = append(c.hooks.Slot, hooks...)
}

// Create returns a create builder for Slot.
func (c *SlotClient) Create() *SlotCreate {
	mutation := newSlotMutation(c.config, OpCreate)
	return &SlotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Slot entities.
func (c *SlotClient) CreateBulk(builders ...*SlotCreate) *SlotCreateBulk {
	return &SlotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Slot.
func (c *SlotClient) Update() *SlotUpdate {
	mutation := newSlotMutation(c.config, OpUpdate)
	return &SlotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SlotClient) UpdateOne(s *Slot) *SlotUpdateOne {
	mutation := newSlotMutation(c.config, OpUpdateOne, withSlot(s))
	return &SlotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SlotClient) UpdateOneID(id int) *SlotUpdateOne {
	mutation := newSlotMutation(c.config, OpUpdateOne, withSlotID(id))
	return &SlotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Slot.
func (c *SlotClient) Delete() *SlotDelete {
	mutation := newSlotMutation(c.config, OpDelete)
	return &SlotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SlotClient) DeleteOne(s *Slot) *SlotDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SlotClient) DeleteOneID(id int) *SlotDeleteOne {
	builder := c.Delete().Where(slot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SlotDeleteOne{builder}
}

// Query returns a query builder for Slot.
func (c *SlotClient) Query() *SlotQuery {
	return &SlotQuery{
		config: c.config,
	}
}

// Get returns a Slot entity by its id.
func (c *SlotClient) Get(ctx context.Context, id int) (*Slot, error) {
	return c.Query().Where(slot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SlotClient) GetX(ctx context.Context, id int) *Slot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResource queries the resource edge of a Slot.
func (c *SlotClient) QueryResource(s *Slot) *ResourceQuery {
	query := &ResourceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(slot.Table, slot.FieldID, id),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, slot.ResourceTable, slot.ResourceColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SlotClient) Hooks() []Hook {
	return c.hooks.Slot
}

// UnavailabilityClient is a client for the Unavailability schema.
type UnavailabilityClient struct {
	config
}

// NewUnavailabilityClient returns a client for the Unavailability from the given config.
func NewUnavailabilityClient(c config) *UnavailabilityClient {
	return &UnavailabilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unavailability.Hooks(f(g(h())))`.
func (c *UnavailabilityClient) Use(hooks ...Hook) {
	c.hooks.Unavailability = append(c.hooks.Unavailability, hooks...)
}

// Create returns a create builder for Unavailability.
func (c *UnavailabilityClient) Create() *UnavailabilityCreate {
	mutation := newUnavailabilityMutation(c.config, OpCreate)
	return &UnavailabilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Unavailability entities.
func (c *UnavailabilityClient) CreateBulk(builders ...*UnavailabilityCreate) *UnavailabilityCreateBulk {
	return &UnavailabilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Unavailability.
func (c *UnavailabilityClient) Update() *UnavailabilityUpdate {
	mutation := newUnavailabilityMutation(c.config, OpUpdate)
	return &UnavailabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnavailabilityClient) UpdateOne(u *Unavailability) *UnavailabilityUpdateOne {
	mutation := newUnavailabilityMutation(c.config, OpUpdateOne, withUnavailability(u))
	return &UnavailabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnavailabilityClient) UpdateOneID(id int) *UnavailabilityUpdateOne {
	mutation := newUnavailabilityMutation(c.config, OpUpdateOne, withUnavailabilityID(id))
	return &UnavailabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Unavailability.
func (c *UnavailabilityClient) Delete() *UnavailabilityDelete {
	mutation := newUnavailabilityMutation(c.config, OpDelete)
	return &UnavailabilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnavailabilityClient) DeleteOne(u *Unavailability) *UnavailabilityDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnavailabilityClient) DeleteOneID(id int) *UnavailabilityDeleteOne {
	builder := c.Delete().Where(unavailability.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnavailabilityDeleteOne{builder}
}

// Query returns a query builder for Unavailability.
func (c *UnavailabilityClient) Query() *UnavailabilityQuery {
	return &UnavailabilityQuery{
		config: c.config,
	}
}

// Get returns a Unavailability entity by its id.
func (c *UnavailabilityClient) Get(ctx context.Context, id int) (*Unavailability, error) {
	return c.Query().Where(unavailability.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnavailabilityClient) GetX(ctx context.Context, id int) *Unavailability {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResource queries the resource edge of a Unavailability.
func (c *UnavailabilityClient) QueryResource(u *Unavailability) *ResourceQuery {
	query := &ResourceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unavailability.Table, unavailability.FieldID, id),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unavailability.ResourceTable, unavailability.ResourceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnavailabilityClient) Hooks() []Hook {
	return c.hooks.Unavailability
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuths queries the auths edge of a User.
func (c *UserClient) QueryAuths(u *User) *AuthQuery {
	query := &AuthQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(auth.Table, auth.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuthsTable, user.AuthsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a User.
func (c *UserClient) QueryOrganization(u *User) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.OrganizationTable, user.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
