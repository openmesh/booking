// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/resource"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// BookingPrice holds the value of the "bookingPrice" field.
	BookingPrice int `json:"bookingPrice,omitempty"`
	// OrganizationId holds the value of the "organizationId" field.
	OrganizationId int `json:"organizationId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges ResourceEdges `json:"edges"`
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Slots holds the value of the slots edge.
	Slots []*Slot `json:"slots,omitempty"`
	// Bookings holds the value of the bookings edge.
	Bookings []*Booking `json:"bookings,omitempty"`
	// Unavailabilities holds the value of the unavailabilities edge.
	Unavailabilities []*Unavailability `json:"unavailabilities,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SlotsOrErr returns the Slots value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) SlotsOrErr() ([]*Slot, error) {
	if e.loadedTypes[0] {
		return e.Slots, nil
	}
	return nil, &NotLoadedError{edge: "slots"}
}

// BookingsOrErr returns the Bookings value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) BookingsOrErr() ([]*Booking, error) {
	if e.loadedTypes[1] {
		return e.Bookings, nil
	}
	return nil, &NotLoadedError{edge: "bookings"}
}

// UnavailabilitiesOrErr returns the Unavailabilities value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) UnavailabilitiesOrErr() ([]*Unavailability, error) {
	if e.loadedTypes[2] {
		return e.Unavailabilities, nil
	}
	return nil, &NotLoadedError{edge: "unavailabilities"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[3] {
		if e.Organization == nil {
			// The edge organization was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case resource.FieldID, resource.FieldPrice, resource.FieldBookingPrice, resource.FieldOrganizationId:
			values[i] = new(sql.NullInt64)
		case resource.FieldName, resource.FieldDescription, resource.FieldTimezone, resource.FieldPassword:
			values[i] = new(sql.NullString)
		case resource.FieldCreatedAt, resource.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Resource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case resource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case resource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case resource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case resource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case resource.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				r.Timezone = value.String
			}
		case resource.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				r.Password = value.String
			}
		case resource.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				r.Price = int(value.Int64)
			}
		case resource.FieldBookingPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bookingPrice", values[i])
			} else if value.Valid {
				r.BookingPrice = int(value.Int64)
			}
		case resource.FieldOrganizationId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field organizationId", values[i])
			} else if value.Valid {
				r.OrganizationId = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySlots queries the "slots" edge of the Resource entity.
func (r *Resource) QuerySlots() *SlotQuery {
	return (&ResourceClient{config: r.config}).QuerySlots(r)
}

// QueryBookings queries the "bookings" edge of the Resource entity.
func (r *Resource) QueryBookings() *BookingQuery {
	return (&ResourceClient{config: r.config}).QueryBookings(r)
}

// QueryUnavailabilities queries the "unavailabilities" edge of the Resource entity.
func (r *Resource) QueryUnavailabilities() *UnavailabilityQuery {
	return (&ResourceClient{config: r.config}).QueryUnavailabilities(r)
}

// QueryOrganization queries the "organization" edge of the Resource entity.
func (r *Resource) QueryOrganization() *OrganizationQuery {
	return (&ResourceClient{config: r.config}).QueryOrganization(r)
}

// Update returns a builder for updating this Resource.
// Note that you need to call Resource.Unwrap() before calling this method if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return (&ResourceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Resource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", description=")
	builder.WriteString(r.Description)
	builder.WriteString(", timezone=")
	builder.WriteString(r.Timezone)
	builder.WriteString(", password=")
	builder.WriteString(r.Password)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", r.Price))
	builder.WriteString(", bookingPrice=")
	builder.WriteString(fmt.Sprintf("%v", r.BookingPrice))
	builder.WriteString(", organizationId=")
	builder.WriteString(fmt.Sprintf("%v", r.OrganizationId))
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource

func (r Resources) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
