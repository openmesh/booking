// Code generated by entc, DO NOT EDIT.

package resource

import (
	"time"
)

const (
	// Label holds the string label denoting the resource type in the database.
	Label = "resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldBookingPrice holds the string denoting the bookingprice field in the database.
	FieldBookingPrice = "booking_price"
	// FieldOrganizationId holds the string denoting the organizationid field in the database.
	FieldOrganizationId = "organization_id"
	// FieldQuantityAvailable holds the string denoting the quantityavailable field in the database.
	FieldQuantityAvailable = "quantity_available"
	// EdgeSlots holds the string denoting the slots edge name in mutations.
	EdgeSlots = "slots"
	// EdgeBookings holds the string denoting the bookings edge name in mutations.
	EdgeBookings = "bookings"
	// EdgeUnavailabilities holds the string denoting the unavailabilities edge name in mutations.
	EdgeUnavailabilities = "unavailabilities"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the resource in the database.
	Table = "resources"
	// SlotsTable is the table that holds the slots relation/edge.
	SlotsTable = "slots"
	// SlotsInverseTable is the table name for the Slot entity.
	// It exists in this package in order to avoid circular dependency with the "slot" package.
	SlotsInverseTable = "slots"
	// SlotsColumn is the table column denoting the slots relation/edge.
	SlotsColumn = "resource_id"
	// BookingsTable is the table that holds the bookings relation/edge.
	BookingsTable = "bookings"
	// BookingsInverseTable is the table name for the Booking entity.
	// It exists in this package in order to avoid circular dependency with the "booking" package.
	BookingsInverseTable = "bookings"
	// BookingsColumn is the table column denoting the bookings relation/edge.
	BookingsColumn = "resource_id"
	// UnavailabilitiesTable is the table that holds the unavailabilities relation/edge.
	UnavailabilitiesTable = "unavailabilities"
	// UnavailabilitiesInverseTable is the table name for the Unavailability entity.
	// It exists in this package in order to avoid circular dependency with the "unavailability" package.
	UnavailabilitiesInverseTable = "unavailabilities"
	// UnavailabilitiesColumn is the table column denoting the unavailabilities relation/edge.
	UnavailabilitiesColumn = "resource_id"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "resources"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
)

// Columns holds all SQL columns for resource fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldDescription,
	FieldTimezone,
	FieldPassword,
	FieldPrice,
	FieldBookingPrice,
	FieldOrganizationId,
	FieldQuantityAvailable,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)
