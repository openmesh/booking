// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmesh/booking/ent/organization"
	"github.com/openmesh/booking/ent/organizationownership"
	"github.com/openmesh/booking/ent/user"
)

// OrganizationOwnershipCreate is the builder for creating a OrganizationOwnership entity.
type OrganizationOwnershipCreate struct {
	config
	mutation *OrganizationOwnershipMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (ooc *OrganizationOwnershipCreate) SetUserId(i int) *OrganizationOwnershipCreate {
	ooc.mutation.SetUserId(i)
	return ooc
}

// SetOrganizationId sets the "organizationId" field.
func (ooc *OrganizationOwnershipCreate) SetOrganizationId(i int) *OrganizationOwnershipCreate {
	ooc.mutation.SetOrganizationId(i)
	return ooc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ooc *OrganizationOwnershipCreate) SetUserID(id int) *OrganizationOwnershipCreate {
	ooc.mutation.SetUserID(id)
	return ooc
}

// SetUser sets the "user" edge to the User entity.
func (ooc *OrganizationOwnershipCreate) SetUser(u *User) *OrganizationOwnershipCreate {
	return ooc.SetUserID(u.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ooc *OrganizationOwnershipCreate) SetOrganizationID(id int) *OrganizationOwnershipCreate {
	ooc.mutation.SetOrganizationID(id)
	return ooc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ooc *OrganizationOwnershipCreate) SetOrganization(o *Organization) *OrganizationOwnershipCreate {
	return ooc.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationOwnershipMutation object of the builder.
func (ooc *OrganizationOwnershipCreate) Mutation() *OrganizationOwnershipMutation {
	return ooc.mutation
}

// Save creates the OrganizationOwnership in the database.
func (ooc *OrganizationOwnershipCreate) Save(ctx context.Context) (*OrganizationOwnership, error) {
	var (
		err  error
		node *OrganizationOwnership
	)
	if len(ooc.hooks) == 0 {
		if err = ooc.check(); err != nil {
			return nil, err
		}
		node, err = ooc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganizationOwnershipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ooc.check(); err != nil {
				return nil, err
			}
			ooc.mutation = mutation
			if node, err = ooc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ooc.hooks) - 1; i >= 0; i-- {
			if ooc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ooc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ooc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ooc *OrganizationOwnershipCreate) SaveX(ctx context.Context) *OrganizationOwnership {
	v, err := ooc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ooc *OrganizationOwnershipCreate) Exec(ctx context.Context) error {
	_, err := ooc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ooc *OrganizationOwnershipCreate) ExecX(ctx context.Context) {
	if err := ooc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ooc *OrganizationOwnershipCreate) check() error {
	if _, ok := ooc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "userId"`)}
	}
	if _, ok := ooc.mutation.OrganizationId(); !ok {
		return &ValidationError{Name: "organizationId", err: errors.New(`ent: missing required field "organizationId"`)}
	}
	if _, ok := ooc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	if _, ok := ooc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New("ent: missing required edge \"organization\"")}
	}
	return nil
}

func (ooc *OrganizationOwnershipCreate) sqlSave(ctx context.Context) (*OrganizationOwnership, error) {
	_node, _spec := ooc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ooc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ooc *OrganizationOwnershipCreate) createSpec() (*OrganizationOwnership, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationOwnership{config: ooc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: organizationownership.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organizationownership.FieldID,
			},
		}
	)
	if nodes := ooc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.UserTable,
			Columns: []string{organizationownership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ooc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationownership.OrganizationTable,
			Columns: []string{organizationownership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationOwnershipCreateBulk is the builder for creating many OrganizationOwnership entities in bulk.
type OrganizationOwnershipCreateBulk struct {
	config
	builders []*OrganizationOwnershipCreate
}

// Save creates the OrganizationOwnership entities in the database.
func (oocb *OrganizationOwnershipCreateBulk) Save(ctx context.Context) ([]*OrganizationOwnership, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oocb.builders))
	nodes := make([]*OrganizationOwnership, len(oocb.builders))
	mutators := make([]Mutator, len(oocb.builders))
	for i := range oocb.builders {
		func(i int, root context.Context) {
			builder := oocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationOwnershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oocb *OrganizationOwnershipCreateBulk) SaveX(ctx context.Context) []*OrganizationOwnership {
	v, err := oocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oocb *OrganizationOwnershipCreateBulk) Exec(ctx context.Context) error {
	_, err := oocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oocb *OrganizationOwnershipCreateBulk) ExecX(ctx context.Context) {
	if err := oocb.Exec(ctx); err != nil {
		panic(err)
	}
}
