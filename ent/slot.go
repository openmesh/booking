// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/openmesh/booking/ent/resource"
	"github.com/openmesh/booking/ent/slot"
)

// Slot is the model entity for the Slot schema.
type Slot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Day holds the value of the "day" field.
	Day string `json:"day,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime string `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime string `json:"endTime,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity *int `json:"quantity,omitempty"`
	// ResourceId holds the value of the "resourceId" field.
	ResourceId int `json:"resourceId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SlotQuery when eager-loading is set.
	Edges SlotEdges `json:"edges"`
}

// SlotEdges holds the relations/edges for other nodes in the graph.
type SlotEdges struct {
	// Resource holds the value of the resource edge.
	Resource *Resource `json:"resource,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResourceOrErr returns the Resource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SlotEdges) ResourceOrErr() (*Resource, error) {
	if e.loadedTypes[0] {
		if e.Resource == nil {
			// The edge resource was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.Resource, nil
	}
	return nil, &NotLoadedError{edge: "resource"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Slot) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case slot.FieldID, slot.FieldQuantity, slot.FieldResourceId:
			values[i] = new(sql.NullInt64)
		case slot.FieldDay, slot.FieldStartTime, slot.FieldEndTime:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Slot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Slot fields.
func (s *Slot) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case slot.FieldDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				s.Day = value.String
			}
		case slot.FieldStartTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				s.StartTime = value.String
			}
		case slot.FieldEndTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				s.EndTime = value.String
			}
		case slot.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				s.Quantity = new(int)
				*s.Quantity = int(value.Int64)
			}
		case slot.FieldResourceId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resourceId", values[i])
			} else if value.Valid {
				s.ResourceId = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryResource queries the "resource" edge of the Slot entity.
func (s *Slot) QueryResource() *ResourceQuery {
	return (&SlotClient{config: s.config}).QueryResource(s)
}

// Update returns a builder for updating this Slot.
// Note that you need to call Slot.Unwrap() before calling this method if this Slot
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Slot) Update() *SlotUpdateOne {
	return (&SlotClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Slot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Slot) Unwrap() *Slot {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Slot is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Slot) String() string {
	var builder strings.Builder
	builder.WriteString("Slot(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", day=")
	builder.WriteString(s.Day)
	builder.WriteString(", startTime=")
	builder.WriteString(s.StartTime)
	builder.WriteString(", endTime=")
	builder.WriteString(s.EndTime)
	if v := s.Quantity; v != nil {
		builder.WriteString(", quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", resourceId=")
	builder.WriteString(fmt.Sprintf("%v", s.ResourceId))
	builder.WriteByte(')')
	return builder.String()
}

// Slots is a parsable slice of Slot.
type Slots []*Slot

func (s Slots) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
