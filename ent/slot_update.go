// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmesh/booking/ent/predicate"
	"github.com/openmesh/booking/ent/resource"
	"github.com/openmesh/booking/ent/slot"
)

// SlotUpdate is the builder for updating Slot entities.
type SlotUpdate struct {
	config
	hooks    []Hook
	mutation *SlotMutation
}

// Where appends a list predicates to the SlotUpdate builder.
func (su *SlotUpdate) Where(ps ...predicate.Slot) *SlotUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDay sets the "day" field.
func (su *SlotUpdate) SetDay(s string) *SlotUpdate {
	su.mutation.SetDay(s)
	return su
}

// SetStartTime sets the "startTime" field.
func (su *SlotUpdate) SetStartTime(s string) *SlotUpdate {
	su.mutation.SetStartTime(s)
	return su
}

// SetEndTime sets the "endTime" field.
func (su *SlotUpdate) SetEndTime(s string) *SlotUpdate {
	su.mutation.SetEndTime(s)
	return su
}

// SetQuantity sets the "quantity" field.
func (su *SlotUpdate) SetQuantity(i int) *SlotUpdate {
	su.mutation.ResetQuantity()
	su.mutation.SetQuantity(i)
	return su
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (su *SlotUpdate) SetNillableQuantity(i *int) *SlotUpdate {
	if i != nil {
		su.SetQuantity(*i)
	}
	return su
}

// AddQuantity adds i to the "quantity" field.
func (su *SlotUpdate) AddQuantity(i int) *SlotUpdate {
	su.mutation.AddQuantity(i)
	return su
}

// ClearQuantity clears the value of the "quantity" field.
func (su *SlotUpdate) ClearQuantity() *SlotUpdate {
	su.mutation.ClearQuantity()
	return su
}

// SetResourceId sets the "resourceId" field.
func (su *SlotUpdate) SetResourceId(i int) *SlotUpdate {
	su.mutation.SetResourceId(i)
	return su
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (su *SlotUpdate) SetResourceID(id int) *SlotUpdate {
	su.mutation.SetResourceID(id)
	return su
}

// SetResource sets the "resource" edge to the Resource entity.
func (su *SlotUpdate) SetResource(r *Resource) *SlotUpdate {
	return su.SetResourceID(r.ID)
}

// Mutation returns the SlotMutation object of the builder.
func (su *SlotUpdate) Mutation() *SlotMutation {
	return su.mutation
}

// ClearResource clears the "resource" edge to the Resource entity.
func (su *SlotUpdate) ClearResource() *SlotUpdate {
	su.mutation.ClearResource()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SlotUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SlotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SlotUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SlotUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SlotUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SlotUpdate) check() error {
	if _, ok := su.mutation.ResourceID(); su.mutation.ResourceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"resource\"")
	}
	return nil
}

func (su *SlotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   slot.Table,
			Columns: slot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: slot.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Day(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: slot.FieldDay,
		})
	}
	if value, ok := su.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: slot.FieldStartTime,
		})
	}
	if value, ok := su.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: slot.FieldEndTime,
		})
	}
	if value, ok := su.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: slot.FieldQuantity,
		})
	}
	if value, ok := su.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: slot.FieldQuantity,
		})
	}
	if su.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: slot.FieldQuantity,
		})
	}
	if su.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slot.ResourceTable,
			Columns: []string{slot.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slot.ResourceTable,
			Columns: []string{slot.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SlotUpdateOne is the builder for updating a single Slot entity.
type SlotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SlotMutation
}

// SetDay sets the "day" field.
func (suo *SlotUpdateOne) SetDay(s string) *SlotUpdateOne {
	suo.mutation.SetDay(s)
	return suo
}

// SetStartTime sets the "startTime" field.
func (suo *SlotUpdateOne) SetStartTime(s string) *SlotUpdateOne {
	suo.mutation.SetStartTime(s)
	return suo
}

// SetEndTime sets the "endTime" field.
func (suo *SlotUpdateOne) SetEndTime(s string) *SlotUpdateOne {
	suo.mutation.SetEndTime(s)
	return suo
}

// SetQuantity sets the "quantity" field.
func (suo *SlotUpdateOne) SetQuantity(i int) *SlotUpdateOne {
	suo.mutation.ResetQuantity()
	suo.mutation.SetQuantity(i)
	return suo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (suo *SlotUpdateOne) SetNillableQuantity(i *int) *SlotUpdateOne {
	if i != nil {
		suo.SetQuantity(*i)
	}
	return suo
}

// AddQuantity adds i to the "quantity" field.
func (suo *SlotUpdateOne) AddQuantity(i int) *SlotUpdateOne {
	suo.mutation.AddQuantity(i)
	return suo
}

// ClearQuantity clears the value of the "quantity" field.
func (suo *SlotUpdateOne) ClearQuantity() *SlotUpdateOne {
	suo.mutation.ClearQuantity()
	return suo
}

// SetResourceId sets the "resourceId" field.
func (suo *SlotUpdateOne) SetResourceId(i int) *SlotUpdateOne {
	suo.mutation.SetResourceId(i)
	return suo
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (suo *SlotUpdateOne) SetResourceID(id int) *SlotUpdateOne {
	suo.mutation.SetResourceID(id)
	return suo
}

// SetResource sets the "resource" edge to the Resource entity.
func (suo *SlotUpdateOne) SetResource(r *Resource) *SlotUpdateOne {
	return suo.SetResourceID(r.ID)
}

// Mutation returns the SlotMutation object of the builder.
func (suo *SlotUpdateOne) Mutation() *SlotMutation {
	return suo.mutation
}

// ClearResource clears the "resource" edge to the Resource entity.
func (suo *SlotUpdateOne) ClearResource() *SlotUpdateOne {
	suo.mutation.ClearResource()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SlotUpdateOne) Select(field string, fields ...string) *SlotUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Slot entity.
func (suo *SlotUpdateOne) Save(ctx context.Context) (*Slot, error) {
	var (
		err  error
		node *Slot
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SlotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SlotUpdateOne) SaveX(ctx context.Context) *Slot {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SlotUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SlotUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SlotUpdateOne) check() error {
	if _, ok := suo.mutation.ResourceID(); suo.mutation.ResourceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"resource\"")
	}
	return nil
}

func (suo *SlotUpdateOne) sqlSave(ctx context.Context) (_node *Slot, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   slot.Table,
			Columns: slot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: slot.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Slot.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slot.FieldID)
		for _, f := range fields {
			if !slot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Day(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: slot.FieldDay,
		})
	}
	if value, ok := suo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: slot.FieldStartTime,
		})
	}
	if value, ok := suo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: slot.FieldEndTime,
		})
	}
	if value, ok := suo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: slot.FieldQuantity,
		})
	}
	if value, ok := suo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: slot.FieldQuantity,
		})
	}
	if suo.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: slot.FieldQuantity,
		})
	}
	if suo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slot.ResourceTable,
			Columns: []string{slot.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slot.ResourceTable,
			Columns: []string{slot.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: resource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Slot{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
